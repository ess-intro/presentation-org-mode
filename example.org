* set up Org Mode (one time)

we have a hypothesis relating the density of a US state with the life
expectancy in that state.  let's write some code to explore this.

** emacs, org mode setup :noexport:

to allow evaluating R code, evaluate this source block by putting
point inside and typing [C-c C-c] (control C followed by control C)
and giving permission for it to be evaluated.
#+name: set-allowed-languages
#+begin_src elisp :results none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t) (R . t)))
#+end_src
(normally, you would do this by customizing
=org-babel-load-languages=.)

then, to allow *editing* R code, evaluate this source block, etc.
#+name: requireessrmode
#+begin_src elisp :results none
  (require 'ess-r-mode)
#+end_src
(this is required because i'm running =emacs -Q=, so i don't have my
normal customizations.)

** first R source block -- lookup something

let's evaluate this

#+begin_src R
  state.abb[match("Wyoming", state.name)]
#+end_src

but, we might need to do that many times.  let's write a subroutine to
do that, passing the table from which the return value should be taken
as a second argument.

#+begin_src R
  lookup <- function(state, where) {
    where[match(state, where)] # XXX
  }

  lookup("Wyoming", state.abb)
#+end_src

we seem a bit low on results.  what's wrong?

** find some state statistics

#+begin_src R
    state.x77[,"HS Grad"][match("Wyoming", state.name)]
#+end_src

but, maybe we could re-use the lookup function?  using =:noweb=?

add a name to the source block that held the lookup function.

#+name: lookup
#+begin_src R
  lookup <- function(state, where) {
    where[match(state, state.name)]
  }
#+end_src

okay, now we can include it with =:noweb=

#+begin_src R
  <<lookup>>

  lookup("Wyoming", state.x77[,"HS Grad"])

#+end_src

** now, do a graph

for our project, we're going to be accessing various state statistics,
so we realize we'd like *also* to have the lookup of state statistics
as a common routine.

*** re-use

we'll need some utilty code to return columns of =state.x77= (which we
can include with =:noweb=).

#+name: state_stat
#+begin_src R :results none
  state_stat <- function(which) {
    state.x77[,which]
  }
#+end_src

and, make use of that, see if it works.

#+begin_src R :noweb yes
  <<state_stat>>
  <<lookup>>

  lookup("Wyoming", state_stat("HS Grad"))
#+end_src

*** now, routines to compute the specific stats we want

we take the calculations of the relevant statistics out of the block
that actually does the graphing.  to pass the results, we can't use
=:noweb=.  we can, however, use =:var=, which allows the results of
one source block to be used as input to another source block.

a simple routine to produce the life expectancies of states.  note
that =:results= is set to =table=.  (adding =drawer= means we can hide
it away easier, to keep the visual buffer less cluttered.)

#+name: expectancy
#+begin_src R :results table drawer :noweb yes
  <<state_stat>>
  state_stat("Life Exp")
#+end_src

now, what is the density?  =population=/=area=, i guess.

#+name: density
#+begin_src R :results table drawer :noweb yes
  <<state_stat>>
  state_stat("Population") %/% state_stat("Area") # XXX
#+end_src


*** finally, the graphing code itself.

and, now, write the graph routine.  reminder: we aren't accessing
=density= and =expectancy= via =:noweb=, but, rather, via =:var= (but,
we still use =:noweb=).

i hope it works!

#+header: :var density=density
#+header: :var expectancy=expectancy
#+header: :results output file graphics
#+header: :file expect.png
#+header: :exports both
#+header: :noweb yes
#+begin_src R 
  <<lookup>>  # note: syntax checker doesn't understand =:noweb= references

  plot(density, expectancy,
       panel.first = lines(stats::lowess(density, expectancy), lty = "dashed"),
       pch = ".", cex = 1.2, col = "blue")
  text(density, expectancy,  lookup(rownames(state.x77), state.abb),
       pos=1, cex=1, col="red")
#+end_src

(open the resulting file with [C-c C-o].)

** now, let's export and see our marvelous work!
