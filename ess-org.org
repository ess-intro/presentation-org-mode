* using ESS with emacs org mode
#+property: header-args :noweb yes
#+property: header-args:org :exports both
#  ^:{}: disable super/subscripting: https://stackoverflow.com/a/698791/1527747
#+options: ^:{}
#+property: header-args :noweb yes :exports code :eval never-export
** intro to org mode
basics: document structuring, tables, math/LaTeX, exporting

[[https://www.gnu.org/software/emacs/][emacs]] ([[https://en.wikipedia.org/wiki/Emacs][wikipedia]]) [[https://orgmode.org/][org mode]] [fn::a.k.a., "org-mode", Org Mode, orgmode
-- the proliferation of notation makes googling somewhat of a
challenge.]  sometimes exhorts one to do something like "Organize Your
Life In Plain Text!"; the org mode manual, on the other hand, starts
off by saying, "Org is an outliner".  the philosophy of org-mode
(indeed, of Emacs, and maybe, to some extent, of any of the *nix
operating systems) is that using non-proprietary file formats and
software provides the most "liberating" and "horizon-free" way of
taking advantage of modern information technology.  and, to some
extent, that a mostly-command line interface, rather than a graphical
user interface, is also "the way to go".

i think org mode started off as a way of simplifying the creation of
formatted documents, with tables, etc., for taking notes, creating
agendas (items with date elements), and evolved into a much larger
system of utilities for, for example, converting ("exporting", in org
mode parlance) between the org mode syntax to .html, .pdf, etc.,
documents, with good support for doing mathematical (LaTeX)
formatting.

a .org file is structured like an outline, with outline sections and
levels indicated by lines starting with one or more asterisks in the
first column; these define "headlines" for the outline.  between
headlines one can include text, tables, bits of code, etc.  bits of
the .org file can be displayed and/or hidden by positioning the cursor
on a headline and (possibly repeatedly) hitting =tab=.

asterisk-defined headlines can include "tags" (=:essintro:=; i am
ignorant of their use), and can optionally be (immediately) followed
by a special "drawer" [fn::a structure starting with an more-or-less
arbitrary name, surrouned by colons, and ending with =:END:=] named
=:PROPERTIES:= holding, well, properties, i.e, (key, value) tuples.

Org mode text markup allows the use of *asterisks*, =equal signs=,
~tildes~, /[forward] slashes/, _underscores_ and (though, apparently,
deprecated) +plus signs+, to achieve different font characteristics.
(until writing this, i have always used equal signs for short bits of
code, but now i will try to remember to try out tildes.)

various sorts of "blocks" are supported in org mode files.  these
typically start with =#begin_...=, and end with a corresponding
=#end_...=, where the =...= are something like =src=, =example=,
=quote=.  a skeleton for one of these can conveniently be created by,
in column 1 of an otherwise empty line, typing =<X= followed by =tab=,
where =X= is one of
- =s= for a source block
- =q= for a quote block (line wrapping applies)
- =e= for an example block (line wrapping does not apply)

there are various other blocks; you can experiment by typing (in
column one, of an otherwise empty line) =<= and then one of the
following, and hitting =tab=:
: a, c, C, E, h, l, v
seeing what you get, looking in the manual.  (of course, one can
always search the manual for =#[+]begin_=.)
  
org mode does a good job exporting to LaTeX, html.  (some people
primarily use org mode as a more "user friendly" interface to LaTeX,
though for serious documents, in the final analysis they probably
spend a lot of time tweaking LaTeX, and org-to-LaTeX, configuration.)

in addition to the source blocks mentioned above (and elaborated on
below), org mode allows short bits of "verbatim" code to be introduced
by a colon as the first non-blank column of a line
#+BEGIN_SRC org
	: this is verbatim
#+END_SRC

one can have longer runs of verbatim ("example") data (which is not
word wrapped, etc.:
#+BEGIN_SRC org
	,#+name: ex
	,#+begin_example
	this is a block
	that
	holds more verbatim text
	,#+end_example

	,#+begin_src R :var foo=ex :exports both
	foo
	,#+end_src

	,#+begin_src R :var foo=ex :exports code
	foo
	,#+end_src

#+END_SRC

as well as longer bits of text that *will* be wrapped ("quote":
#+BEGIN_SRC org
	,#+begin_quote
	this is a bit of
	text that should
	show up, eventually, strung out in a smaller
	number
	of
	lines when "filled"
	(e.g., =M-x org-fill-paragraph=, =M-q=)
	,#+end_quote
#+END_SRC

blocks can optionally have [[naming][names]].  these names can be used as [[noweb][noweb]]
references, or to use the value of a block (or, if a source block, of
the block's results) as input (a [[variables][variable]]) to another block in the
file.[fn::i believe there are facilities for "naming" bits of
information in other .org files, but i don't know the details and i
don't know if it works with source code blocks.]

though i have used org mode for more than a decade, i know very little
of most of its capabilities, as i mostly use it to centralize the
source code within a project, as well as to produce the random
document, especially documents with embedded code segments (known, in
org mode, as "source blocks").  a good source for further information,
in addition to the main [[https://orgmode.org/][org mode]] web page, is the org mode [[https://orgmode.org/worg/][worg]] site.
also, once installed on your system, the org mode info pages are
available in emacs (or, using the info).

org mode is bundled into the main emacs distribution, but a
more-than-casual user might like to use the more-than-likely
up-to-date package available via [[https://melpa.org/][melpa]] (in emacs, use =M-x
package-list-packages=, and regexp-search for /^..org /).

** babel -- programming language support in org files

[[https://orgmode.org/worg/org-contrib/babel/intro.html][Babel]] is one name for talking about programming language support in
org mode.  you are able to embed source code inside of org mode
buffers, edit these code blocks in a language-specific way, execute
code blocks, pass the results of the execution of one code block to
another code block, and include code blocks and/or the results of
their execution in the document produced by exporting the org buffer.

*** literate programming, if you want
** <<sourceblocks>> source blocks

Org mode source blocks look like this
#+BEGIN_SRC org
	,#+begin_src R
			"hello, world!"
	,#+end_src

#+END_SRC

(as mentioned above, a source block skeleton can be created by
typing, in column 1, =<s=, and hitting =tab=.)

Org mode source blocks can be edited, either inline in the org mode
(".org") document buffer, or in a separate buffer (i call these "Org
Src..." buffers, but they might also be known as "sub-edit buffers" or
"source edit buffers) that you can "pop up" from the .org buffer ("pop
out of the .org buffer"?), normally with =C-c '=.  in the latter,
there is better support for emacs so-called "font locks", which do
program language-specific source code highlighting, etc.

once written, a source block can be executed, returning [[results][results]],
either the output of the code, or some terminating "value" of the
code, as an element of the .org file.  and, the blocks can be executed
manually, or -- and optionally, block by block -- while exporting a
.org file to a different format.

a source block can be executed in one of two sorts of contexts, within
a "session", or outside of a "session".  a "session" here means some
process that retains state between executions of (possibly different)
source blocks.  on the other hand, a "non-session" starts up with no
internal [fn::obviously, prior runs may have, e.g., changed the state
of the file system on which all these executions are running; that is,
the *external* state may by influenced by what has previously been
executed.] state from prior runs.

source blocks can also be expressed using a =src_LANG= construct; a
=#+name:= line can be used to name the =src_LANG= block.

#+BEGIN_SRC org
	,#+name: whyo
	src_R{"42"} {{{results(=42=)}}}

	,#+begin_src R :var x=whyo :exports results
	x
	,#+end_src

#+END_SRC

finally, and of particular interest in these tutorials, is the fact
that org mode uses ESS to provide R language support.

   [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html][worg page]] on R and org-mode.

** <<naming>> naming blocks

there are two ways of naming blocks.  first, an individual block
itself can be preceded by a =#+name:= line
#+BEGIN_SRC org
	,#+name: somecode
	,#+begin_src R :results output
		cat("this is *some* code!\n")
	,#+end_src

	,#+name: someothercode
	,#+begin_src R :results value
		whynot <- "this is some *other* code!"
	,#+end_src

#+END_SRC

<<properties>> second, a PROPERIES drawer, using the =header-args=
attribute =noweb-ref= to name the (otherwise unnamed, i believe) code
blocks in that branch.
#+BEGIN_SRC org
	,#+property: header-args :noweb yes

	,** this is somewhere in this file
		 :PROPERTIES:
		 :header-args+: :tangle very/important/code.R
		 :header-args+: :noweb-ref nowcode
		 :END:

	now, code blocks will carry that name
	,#+begin_src R
		x <- "we want some code, and we want it now!"
	,#+end_src

	,** somewhere else
	,#+begin_src R :results output
		<<nowcode>>
		cat(x, "\n")
	,#+end_src
#+END_SRC

as you can see, the properties drawer can carry many of properties,
including the name of a destination file for [[tangling][tangling]].  the very odd
=<<nowcode>>= is our next topic: [[noweb][noweb]].

** <<noweb>> noweb

[[https://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming-example][noweb]] is a literate programming syntax to allow referencing blocks of
code within some larger (.org file, say) context.  it allows a
programmer to re-use bits of code (sort of =#include= like).

noweb syntax is *disabled* by default.  to enable noweb syntax, one
can either enable it on the header line of each source code block,
enable it in a properties drawer, or, as in the following, enable it
once at the beginning of an org file:
#+BEGIN_SRC org
	,#+property: header-args  :noweb yes
#+END_SRC

once enabled, references of the kind =<<NAME>>= will incorporate the
contents of a previous source code block.

#+BEGIN_SRC org
	,#+property: header-args :noweb yes

	,#+name: fubar
	,#+begin_src R
	"this is an example"
	,#+end_src

	,#+begin_src R
	<<fubar>>
	,#+end_src

#+END_SRC

** <<tangling>> tangling

while often we are content to execute code blocks inside the .org
file, equally often we might want to export some or all of the code
blocks for execution (or inspection) outside of the .org file.  for
example, we might want to use some of the code in the .org file to
create an R package.

in the world of [[https://orgmode.org/worg/org-contrib/babel/index.html][literate programming]], /tangling/ is the process of
extracting source code from a (theoretically primarily text) document.
in org mode, one uses =org-babel-tangle= (normally bound to =C-c C-v
t=) to tangle the source code blocks in a file.  the file to which a
source block will be tangled is specified in the =:tangle= attribute,
placed on the =#+src_block= line or in a =:header-args= line (in a
properties drawer, to apply to a subtree of the .org file, or
stand-alone as above to apply to the entire .org file).

to actually /tangle/ a file, use =M-x org-babel-tangle=, often bound
to =C-c C-v t=.
   
** <<executing>> executing
*** =C-c C-c= on a source block
*** =C-c C-c= on an inline source block
*** =C-c C-c= on a #+call
*** =C-c C-c= on an inline-call
#+begin_src org
	,#+name: find-orgs
	,#+begin_src R
	1
	,#+end_src

	call_find-orgs()

	,#+call: find-orgs()

	call_find-orgs()

#+end_src
*** :colnames and :rownames
#+begin_src org
	,#+BEGIN_SRC R
	mtcars[1:3,]
	,#+END_SRC

	,#+begin_src R :colnames yes :rownames yes
	mtcars[1:3,]
	,#+end_src

#+end_src

** <<results>> results

#+BEGIN_SRC org
	,#+name: somecode
	,#+begin_src R :results output
		cat("this is *some* code!\n")
	,#+end_src

	,#+name: someothercode
	,#+begin_src R :results value
		whynot <- "this is some *other* code!"
	,#+end_src

#+END_SRC

** <<variables>> variables
-- in and out
** <<exporting>> exporting
entire document or a subtree of the document
** life in Org Src buffers

** org-mode community

   mailing lists

** other tutorials, etc.

[[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Rainer's screencasts about Org mode]] (now a [[https://www.udemy.com/course/getting-yourself-organized-with-org-mode/?referralCode=D0CB0D077ED5EC0788F7][course on Udemy]])

[[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][tutorial on R and org-mode]]
#+begin_example
From: Erik Iverson <erikriverson@gmail.com>
Date: Tue, 23 Feb 2021 12:30:03 -0800
Subject: Re: org-in-org
To: Greg Minshall <minshall@umich.edu>
Cc: emacs-orgmode <emacs-orgmode@gnu.org>
#+end_example

https://raw.githubusercontent.com/vikasrawal/orgpaper/master/orgpapers.org
or
https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org
or, more recently:
#+begin_example
From: Jeremie Juste <jeremiejuste@gmail.com>
To: Greg Minshall <minshall@umich.edu>
Subject: Re: org-in-org
Date: Tue, 23 Feb 2021 22:38:06 +0100
Cc: emacs-orgmode@gnu.org
#+end_example

** experiments

#+NAME: readdata-code
#+BEGIN_SRC org

	,#+NAME: readdata-code
	,#+BEGIN_SRC R :results value silent

	read.data("datafile1.csv",sep=",",header=T)->mydata1


	,#+END_SRC
#+END_SRC

#+BEGIN_SRC org
	,#+begin_src R
		print("abc")
	,#+end_src

#+END_SRC


#+BEGIN_SRC org
	,#+begin_src R
		print("def")
	,#+end_src
#+END_SRC



** meta : tools, etc :noexport:

https://obsproject.com/wiki/OBS-Studio-Quickstart obs, on arch linux
(part of the obs-studio package).

https://github.com/ess-intro/ess-intro/issues is where most discussion
happens.

[[https://emacsconf.org/2020/talks/30/][vterm]] is pretty fast.

to get little modifier key thing:
: pip install git+https://github.com/scottkirkwood/key-mon
but, it doesn't like my control key.

to execute each code block in a buffer:
:from:
#+begin_example
From: "Berry, Charles" <ccberry@health.ucsd.edu>
To: Greg Minshall <minshall@umich.edu>
CC: "emacs-orgmode@gnu.org" <emacs-orgmode@gnu.org>
Subject: Re: org-in-org
Date: Tue, 23 Feb 2021 19:46:32 +0000
#+end_example
:end:
#+header: :results both
#+BEGIN_SRC emacs-lisp
(defun org-exe-org ()
  (let ((org-confirm-babel-evaluate nil))
    (org-edit-src-code)
    (org-babel-execute-buffer)
    (org-edit-src-exit)))
#+END_SRC
then, do this:
: (org-babel-map-executables nil (org-exe-org))

but, i'd rather query, e.g., =:exports= to see if it exports results.

** elisp code                                                      :noexport:
       :PROPERTIES:
       :header-args+: :tangle ./built/el-org.el
       :END:

#+name: org-filter-by-results
#+begin_src elisp :results none
	(require 'ob-core)
	(require 'dash)

	(defun org-filter-by-argument-value (arg values &optional locs negate)
		"Return the subset of LOCS (default: (point)) that correspond
	to executable locations in the current buffer whose
	\"info\" (org-babel-get-src-block-info) argument parameter
	contains an argument ARG with a value in VALUES."
		(let ((pt (point))
					(results (mapcar (lambda (l)
										 (progn
											 (goto-char l)
											 (let* ((info (org-babel-get-src-block-info))
															(value (cdr (assoc arg (nth 2 info)))))
												 (if (or (and negate (not (member value values)))
																 (and (not negate) (member value values)))
														 l
													 nil))))
									 (if locs locs (list (point))))))
		(goto-char pt)
		(reverse (--filter it results))))
#+end_src

*** for each block in the (whichever) buffer

- if ":exports code/both", create a systematically-named file with the
  code
- if ":exports results/both", create a systematically-named file with
  the results

		"visit each code block in the current buffer.  if the block
	should export code, build a separate file with that code.  if the
	block should export results, evaluate the code block and place
	the results in a separate file.  the separate files names are
	derived from the name of the source code block, with either
	\"code\" or \"results\" appended, and is added to directory
	DIR (default: \"./EXPORTS\").  if a source block is unnamed, its
	[zero-based] ordinal position in the file is use (prefixed by the
	string \"N-\")."

*** for each block in the (whichever) buffer

- if :eval is not (some form of) "no", offer it up for evaluation

#+name: org-walk-and-execute
#+BEGIN_SRC elisp :results none
	(require 'ob-core)

	(defun org-walk-and-execute (&optional arg)
		"Based on org-babel-execute-buffer, with the main difference
	that we return the locations of the blocks we executed.  Probably
	should just use o-b-e-b."
		(message "org-walk-and-execute %s" (current-buffer))
		(message "%s" (buffer-base-buffer))
		(message "before: modified? %s" (buffer-modified-p))
		(let ((result nil))
			(save-window-excursion
				(org-babel-map-executables nil
					(if (org-filter-by-argument-value
							 ':eval
							 (list "never" "never-export" "no" "no-export")
							 nil
							 t)
							(progn
								(message "early o-w-a-e point %s" (point))
								;; fine, this is horrible.
								(setq result (append result (list (point))))
								;; flat-out copied from (org-babel-execute-buffer)
								(if (memq (org-element-type (org-element-context))
													'(babel-call inline-babel-call))
										(org-babel-lob-execute-maybe)
									(org-babel-execute-src-block arg))
								(message "after: modified? %s" (buffer-modified-p))
								(message "later o-w-a-e point %s" (point))
								(point)))))
			(message "result: %s" result)
			result))
#+END_SRC

*** for each org block in the (whichever) buffer

- if :exports "results" or "both", execute all blocks in the org block

#+name: org-get-org-blocks
#+begin_src elisp :results none
  (require 'ob-core)
  (require 'org-element)

  (defun org-get-org-blocks ()
    "return the starting location of each org (language) source
  block in the current buffer"
    (let ((blocks nil))
      (org-babel-map-executables nil
        (let ((info (org-babel-get-src-block-info t)))
          (if (equal (car info) "org")
              (setq blocks (cons (point) blocks)))))
      (reverse blocks)))
#+end_src

for each org-in-org block that :exports either "results" or "both",
open up an edit buffer, and execute all internal code that :exports
either "results" or "both".
#+name: main-loop
#+begin_src elisp :results none
	(defun do-org-blocks ()
		(let (results
					(pt (point)))
			(org-babel-eval-wipe-error-buffer)
			(unwind-protect
					(save-window-excursion
						(mapc
						 (lambda (l)
							 (goto-char l)
							 (org-babel-do-in-edit-buffer
								(let ((result (org-walk-and-execute)))
									(message "dob l, result: %s, %s" l result)
									(org-edit-src-save)
									(setq results (append results (list (list l result)))))))
						 (org-filter-by-argument-value
							':exports (list "results" "both") (org-get-org-blocks))))
				(goto-char pt))
			(message "results: %s" results)
			results))
#+end_src

