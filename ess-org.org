* using ESS with Emacs Org Mode
** meta : setup                                                    :noexport:
#+author: Greg Minshall
#+title: using ESS with Emacs Org Mode
#+subtitle: part of the ESS intro series
#+property: header-args :noweb yes
#+property: header-args:org :exports both
#+options: num:0 toc:2
# in this document, i sometimes need sub-, super-scripts, sometimes
# just a caret
#+options: ^:{}
#+property: header-args :noweb yes :exports code :eval never-export :unnumbered non-nil
# floating TOC:
# https://stackoverflow.com/questions/12232675/how-to-make-table-of-contents-floating
# trick of setupfile trick: https://stackoverflow.com/a/56407596/1527747
#+SETUPFILE: ./artefacts/ess-org-startup.org
# LaTeX settings
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [36pt]
# LaTeX [[https://www.ctan.org/pkg/geometry]["geometry" package]], for setting page layout geometry. 
# "showframe" option is nice for debugging.
#+LATEX_HEADER: \usepackage[a4paper, width=.7\paperwidth, height=.8\paperheight]{geometry}

** Introduction to Org Mode
basics: document structuring, tables, math/LaTeX, exporting

[[https://www.gnu.org/software/emacs/][Emacs]] ([[https://en.wikipedia.org/wiki/Emacs][wikipedia]]) [[https://orgmode.org/][Org Mode]] [fn::a.k.a., "org-mode", Org Mode, orgmode
-- the proliferation of notation makes googling somewhat of a
challenge.]  sometimes exhorts one to do something like "Organize Your
Life In Plain Text!"; the Org Mode manual, on the other hand, starts
off by saying, "Org is an outliner".  The philosophy of Org Mode
(indeed, of Emacs, and maybe, to some extent, of any of the *nix
operating systems) is that using non-proprietary file formats and
software provides the most "liberating" and "horizon-free" way of
taking advantage of modern information technology.  And, to some
extent, that a mostly-command line interface, rather than a graphical
user interface, is also "the way to go".

I think Org Mode started off as a way of simplifying the creation of
formatted documents, with tables, etc., for taking notes, creating
agendas (items with date elements), and evolved into a much larger
system of utilities for, for example, converting ("exporting", in org
mode parlance) between the Org Mode syntax to .html, .pdf, etc.,
documents, with good support for doing mathematical (LaTeX)
formatting.

Org Mode does a good job exporting to LaTeX, html.  (Some people
primarily use Org Mode as a more "user friendly" interface to LaTeX,
though for serious documents, in the final analysis they probably
spend a lot of time tweaking LaTeX, and org-to-LaTeX, configuration.)

Though I have used Org Mode for more than a decade, I know very little
of most of its capabilities, as I mostly use it to centralize the
source code within a project, as well as to produce the random
document, especially documents with embedded code segments (known, in
Org Mode, as "source blocks").

Org Mode is bundled into the main Emacs distribution, but a
more-than-casual user might like to use the more-than-likely
up-to-date package available via [[https://melpa.org/][melpa]] (=[M-x package-list-packages]=,
and regexp-search for /^..org /).

The official [[https://orgmode.org/quickstart.html][Quick Start]] guide provides a very good introduction to
Org Mode.  The main [[https://orgmode.org/][Org Mode]] web page is another good source for
further information, as is the Org Mode [[https://orgmode.org/worg/][worg]] site.  (You may find it
useful to take a linear stroll through [[https://orgmode.org/worg/sitemap.html][the worg site map]].)  Also, once
installed on your system, the Org Mode info pages are available in
Emacs (or, using =info(1)=).


*** Blocks of various sizes, shapes, colors

Various sorts of "blocks" are supported in Org Mode files.  These
start with =#begin_...=, and end with a corresponding =#end_...=,
where the =...= are something like =src=, =example=, =quote=.  A
skeleton for one of these can conveniently be created by, in column 1
of an otherwise empty line, typing =[<X]= followed by =[tab]=, where
=X= is one of
- =e= for an example block (line wrapping does not apply) (=#+begin_example=)
- =q= for a quote block (line wrapping applies) (=#+begin_quote=)
- =s= for a source block (=#+begin_src=)

there are various other blocks; you can experiment by typing (in
column one, of an otherwise empty line) =[<]= and then one of the
following, and hitting =[tab]=:
: a, c, C, E, h, l, v
seeing what you get, looking in the manual.  (Of course, one can
always search the manual for =#[+]begin_=.)
  
In addition to the source blocks mentioned above (and elaborated on
below), Org Mode allows short bits of "verbatim" code to be introduced
by a colon as the first non-blank column of a line
#+BEGIN_SRC org
  : this is verbatim
#+END_SRC

One can have longer runs of verbatim ("example") data (which is not
word wrapped, etc.:
#+BEGIN_SRC org
  ,#+name: ex
  ,#+begin_example
  this is a block
  that
  holds more verbatim text
  ,#+end_example
#+END_SRC

As well as longer bits of text that *will* be wrapped ("quote"):
#+BEGIN_SRC org
  ,#+begin_quote
  this is a bit of
  text that should
  show up, eventually, strung out in a smaller
  number
  of
  lines when "filled"
  (e.g., [M-x org-fill-paragraph], [M-q])
  ,#+end_quote
#+END_SRC

Blocks can optionally have [[naming][names]].  These names can be used as [[noweb][noweb]]
references, or to use the value of a block (or, if a source block, of
the block's results) as input (a [[variables][variable]]) to another block in the
file.[fn::I believe there are facilities for "naming" bits of
information in other .org files, but I don't know the details and I
don't know if it works with source code blocks.]

** Babel -- programming language support in org files

[[https://orgmode.org/worg/org-contrib/babel/intro.html][Babel]] is one name for talking about programming language support in
Org Mode.  You are able to embed source code inside of Org Mode
buffers, edit these code blocks in a language-specific way, evaluate
code blocks, pass the results of the evaulation of one code block to
another code block, and include code blocks and/or the results of
their evaulation in the document produced by exporting the org buffer.

*** <<sourceblocks>> Source blocks

The Org Mode [[https://orgmode.org/guide/][Compact Guide]] has [[https://orgmode.org/guide/Working-with-Source-Code.html][a section]] on source blocks.  A separate
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html]["worg" page]] gives information on using R with Org Mode.  The list of
languages supported by Org Mode is documented [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]].

An Org Mode source block includes source code (in one language, per
source block), an optional [[naming][name]], and optional /[[headerargs][header arguments]]/.

Org Mode source blocks look like this
#+BEGIN_SRC org
  ,#+name: ex
  ,#+begin_example
  this is a block
  that
  holds more verbatim text
  ,#+end_example

  ,#+begin_src R :var foo=ex :exports both
  foo
  ,#+end_src

  ,#+RESULTS:
  | this is a block          |
  | that                     |
  | holds more verbatim text |
  |                          |

  ,#+begin_src R :var foo=ex :exports code
  foo
  ,#+end_src

  ,#+RESULTS:
  | this is a block          |
  | that                     |
  | holds more verbatim text |
  |                          |

#+END_SRC

(As mentioned above, a source block skeleton can be created by
typing, in column 1, =<s=, and hitting =tab=.)

Source blocks can also be expressed using a =src_LANG= construct; a
=#+name:= line can be used to name the =src_LANG= block.

#+BEGIN_SRC org
  ,#+name: whyo
  src_R{"42"} {{{results(=42=)}}}

  ,#+begin_src R :var x=whyo :exports results
  x
  ,#+end_src

  ,#+RESULTS:
  | 42 |
  |    |

#+END_SRC

=src_LANG= constructs also have a syntax for defining [[headerargs][=header arguments=]].

*** Evaluating source blocks

Once written, a source block can be evaluated[fn:: for security
reasons, you will need to set or customize the Emacs variable
=org-babel-load-languages= , via =org-babel-do-load-languages= if you
are doing this to in a current Emacs session, and you will be prompted
each time before a code block is evaluated.], returning [[results][results]],
either the output of the code, or some terminating "value" of the
code, as an element of the .org file.  And, the blocks can be
evaluated manually, or -- and optionally, block by block -- while
exporting a .org file to a different format.

A source block can be evaluated in one of two sorts of contexts,
within a "session", or outside of a "session".  A "session" here means
some process that retains state between evaulations of (possibly
different, but using the same programming language) source blocks.  On
the other hand, a "non-session" starts up with no internal state from
prior runs [fn::obviously, prior runs may have, e.g., changed the
state of the file system on which all these evaulations are running;
that is, the *external* state may by influenced by what has previously
been evaluated.].


Finally, and of particular interest in these tutorials, is the fact
that Org Mode uses ESS to provide R language support.

*** <<naming>> Naming blocks

Org Mode source blocks can be named.  The name can be used to include
the *source* of one block in another block via [[noweb][noweb]], or to include
the *results* of the evaluation of one block as an input [[variables][variable]] to
another block.

Org Mode source blocks are named with a =#+name:= line:
#+BEGIN_SRC org
  ,#+name: somecode
  ,#+begin_src R :results output
	  cat("this is *some* code!\n")
  ,#+end_src

  ,#+RESULTS: somecode
  : this is *some* code!

  ,#+name: someothercode
  ,#+begin_src R :results value
	  whynot <- "this is some *other* code!"
  ,#+end_src

  ,#+RESULTS: someothercode
  : this is some *other* code!

#+END_SRC

*** <<headerargs>> Header arguments
*** <<tangling>> Tangling

While often we are content to evaluate code blocks inside the .org
file, equally often we might want to export some or all of the code
blocks for evaulation (or inspection) outside of the .org file.  For
example, we might want to use some of the code in the .org file to
create an R package.

In the world of [[https://orgmode.org/worg/org-contrib/babel/index.html][literate programming]], /tangling/ is the process of
extracting source code from a (theoretically primarily text) document.
In Org Mode, one uses =org-babel-tangle= (normally bound to =[C-c C-v
t]=) to tangle the source code blocks in a file.  The file to which a
source block will be tangled is specified in the =:tangle= attribute,
placed on the =#+src_block= line or in a =:header-args= line (in a
[[properties][properties drawer]], to apply to a subtree of the .org file, or
stand-alone as above to apply to the entire .org file).

To actually /tangle/ a file, use =]M-x org-babel-tangle]=, often bound
to =[C-c C-v t]=.

The name of the file to which a given source block is tangled is given
by the =:tangle= [[headerargs][header argument]].  Like other header arguments, the
=:tangle= header argument can be specified by one of several ways.
The first way is by specifying it adjoining the source block, either
on the =#+begin_src= line, or on an immediately preceding =#+header=
line (basically, an overflow of the =#+begin_src= line):

#+begin_src org
  ,#+begin_src R :tangle ./nosuchdirectory/foofile
  "this is some R code"
  ,#+end_src

  ,#+RESULTS:
  : this is some R code

  ,#+header: :tangle ./nosuchdirectory/anotherfile
  ,#+begin_src R
  "this is some more R code"
  ,#+end_src

  ,#+RESULTS:
  : this is some more R code
#+end_src

<<properties>> Second, the destination file to tangle a subtree's
worth of source blocks can be specified in a PROPERIES drawer on the
headline for that tree using the =header-args= property's =tangle=
attribute to name the code blocks in that branch that don't have a
"more local" =:tangle= specification.

Alternatively, using a =#+property= tag at the top of a file, you can
define a default tangle destination for all the code blocks in the
file that don't have a "more local" =:tangle= specification.

#+BEGIN_SRC org
  ,#+property: header-args :tangle ./nosuchdirectory/bigfile

  ,** this is somewhere in this file
       :PROPERTIES:
       :header-args+: :tangle very/important/code.R
       :header-args+: :noweb-ref nowcode
       :END:

  now, code blocks will carry that name
  ,#+begin_src R
      x <- "we want some code, and we want it now!"
  ,#+end_src

  ,#+RESULTS:
  : we want some code, and we want it now!

  ,** somewhere else
  ,#+begin_src R :results output
      <<nowcode>>
      cat(x, "\n")
  ,#+end_src

  ,#+RESULTS:
#+END_SRC

As you can see, the properties drawer can carry many of properties,
including the name of a destination file for [[tangling][tangling]].  The very odd
=<<nowcode>>= is our next topic: [[noweb][noweb]].

*** <<noweb>> noweb

[[https://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming-example][noweb]] is a literate programming syntax to allow referencing blocks of
code within some larger (.org file, say) context.  It allows a
programmer to re-use bits of code (sort of =#include= like).

noweb syntax is *disabled* by default.  To enable noweb syntax, one
can either enable it on the header line of each source code block,
enable it in a [[properties][properties drawer]], or, as in the following, enable it
once at the beginning of an org file:
#+BEGIN_SRC org
  ,#+property: header-args  :noweb yes
#+END_SRC

Once enabled, references of the kind =<<NAME>>= will incorporate the
contents of a previous source code block.

#+BEGIN_SRC org
  ,#+property: header-args :noweb yes

  ,#+name: fubar
  ,#+begin_src R
  "this is an example"
  ,#+end_src

  ,#+RESULTS: fubar
  : this is an example

  ,#+begin_src R
  <<fubar>>
  ,#+end_src

  ,#+RESULTS:
  : this is an example

#+END_SRC

*** <<evaulating>> Evaulating
**** =[C-c C-c]= on a source block
**** =[C-c C-c]= on an inline source block
**** =[C-c C-c]= on a #+call
**** =[C-c C-c]= on an inline-call
#+begin_src org
  ,#+name: find-orgs
  ,#+begin_src R
  1
  ,#+end_src

  ,#+RESULTS: find-orgs
  : 1

  call_find-orgs() {{{results(=1=)}}}

  ,#+call: find-orgs()

  ,#+RESULTS:
  : 1

  call_find-orgs() {{{results(=1=)}}}

#+end_src
*** <<results>> Results

#+BEGIN_SRC org
  ,#+name: somecode
  ,#+begin_src R :results output
	  cat("this is *some* code!\n")
  ,#+end_src

  ,#+RESULTS: somecode
  : this is *some* code!

  ,#+name: someothercode
  ,#+begin_src R :results value
	  whynot <- "this is some *other* code!"
  ,#+end_src

  ,#+RESULTS: someothercode
  : this is some *other* code!

#+END_SRC

**** :colnames and :rownames

When processing a table result of a previous source block to be used
as an input [[variables][variable]] to another code block, the =:colnames= header
argument instructs Org Mode how to interpret the first row: should it
be assumed to be a row of column names, a row of data, or should Org
Mode use a heuristic to make that determination.

Similarly, Org Mode uses =:rownames= to determine whether the first
column of each row should be considered as a name for that row, or
simply as the data of the first column of that row.

Also, when processing the *results* of a code block, these header
arguments tell some Org Mode language support routines how to deal
with column and row names of the returned result.  If left off, the
Org Mode result of evaluation will drop any language-specific column
and row names.  However, if these header arguments are set to =yes=,
language-specific column and row names will be included in the results
placed in the Org Mode buffer.

#+begin_src org
  ,#+BEGIN_SRC R
  mtcars[1:3,]
  ,#+END_SRC

  ,#+RESULTS:
  |   21 | 6 | 160 | 110 |  3.9 |  2.62 | 16.46 | 0 | 1 | 4 | 4 |
  |   21 | 6 | 160 | 110 |  3.9 | 2.875 | 17.02 | 0 | 1 | 4 | 4 |
  | 22.8 | 4 | 108 |  93 | 3.85 |  2.32 | 18.61 | 1 | 1 | 4 | 1 |

  ,#+begin_src R :colnames yes :rownames yes
  mtcars[1:3,]
  ,#+end_src

  ,#+RESULTS:
  |               |  mpg | cyl | disp |  hp | drat |    wt |  qsec | vs | am | gear | carb |
  |---------------+------+-----+------+-----+------+-------+-------+----+----+------+------|
  | Mazda RX4     |   21 |   6 |  160 | 110 |  3.9 |  2.62 | 16.46 |  0 |  1 |    4 |    4 |
  | Mazda RX4 Wag |   21 |   6 |  160 | 110 |  3.9 | 2.875 | 17.02 |  0 |  1 |    4 |    4 |
  | Datsun 710    | 22.8 |   4 |  108 |  93 | 3.85 |  2.32 | 18.61 |  1 |  1 |    4 |    1 |

#+end_src

*** <<variables>> Variables
-- in and out
entire document or a subtree of the document
*** Life in Org Src buffers
*** <<exporting>> Exporting

** Org Mode community

   mailing lists

** Other tutorials, etc.

The Org Mode [[https://orgmode.org/quickstart.html][quickstart]] is a nice way to start with Org Mode.

[[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Rainer's screencasts about Org Mode]] (now a [[https://www.udemy.com/course/getting-yourself-organized-with-org-mode/?referralCode=D0CB0D077ED5EC0788F7][course on Udemy]])

[[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][tutorial on R and Org Mode]]
#+begin_example
From: Erik Iverson <erikriverson@gmail.com>
Date: Tue, 23 Feb 2021 12:30:03 -0800
Subject: Re: org-in-org
To: Greg Minshall <minshall@umich.edu>
Cc: emacs-orgmode <emacs-orgmode@gnu.org>
#+end_example

https://raw.githubusercontent.com/vikasrawal/orgpaper/master/orgpapers.org
or
https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org
or, more recently:
#+begin_example
From: Jeremie Juste <jeremiejuste@gmail.com>
To: Greg Minshall <minshall@umich.edu>
Subject: Re: org-in-org
Date: Tue, 23 Feb 2021 22:38:06 +0100
Cc: emacs-orgmode@gnu.org
#+end_example

** experiments                                                      :noexport:

*** audio problems
trying to get microphone to work.  used [[https://wiki.archlinux.org/index.php/PulseAudio/Troubleshooting#Microphone_not_detected_by_PulseAudio][arch pulseaudio
troubleshooting]] page.  "PulseAudio uses wrong microphone" seemed to do
it, with alsamixer:
- F6
- choose actual hardware
- F5 (i used F4)
- select "Capture" ("input source" i didn't see)
then seemed to work, but was overmodulating.  used alsamixer, lowered
level.  (took a couple of times to take effect?)

also
: pactl list sources short
: arecord -l
: pavucontrol
(click on "Input Devices", see that the other microphones -- Front,
Headset -- are unplugged, only Internal is plugged in.

*** more
#+NAME: readdata-code
#+BEGIN_SRC org

  ,#+NAME: readdata-code
  ,#+BEGIN_SRC R :results value silent

  read.data("datafile1.csv",sep=",",header=T)->mydata1


  ,#+END_SRC
#+END_SRC

#+BEGIN_SRC org
  ,#+begin_src R
	  print("abc")
  ,#+end_src

  ,#+RESULTS:
  : abc

#+END_SRC


#+BEGIN_SRC org
  ,#+begin_src R
	  print("def")
  ,#+end_src

  ,#+RESULTS:
  : def
#+END_SRC

** code blocks

there are a few pieces of information Org Mode needs to define a
block of code
- (optionally) a =name= for the block (to use to include the block's
  code in another block with [[file:ess-org.org::*<<noweb>> noweb][noweb]], or to use the block's results as
  input to another block with [[variables][:var]].
- the language of the code in the block
- various arguments (=header arguments= and =switches=) that define
  how the code interacts with its environment
- the source code itself

there are at least two ways of encoding the needed information:

*** a source block

the most "normal" way of defining source code is with a /source
block/.

#+begin_src org
  ,#+begin_src R
    "hello, world"
  ,#+end_src

  ,#+RESULTS:
  : hello, world
#+end_src

we use this form below in discussing the structure of a code block.

*** an /inline/ code block

in a second form, known as an /inline code block/, the entire block
can fit on one line (though multiple lines are possible).

#+begin_src org
  src_R{"hello, world"} {{{results(=hello\, world=)}}}
#+end_src

i don't use this form.  for this tutorial i looked at it briefly.  it
appears its semantics are different from that of source blocks.  other
than that, i will not discuss it further.

*** the anatomy of a source block

#+begin_src org
  ,#+name: refid
  ,#+begin_example
  this is a test
  ,#+end_example

  ,#+name: anatomy
  ,#+begin_src R :var varname=refid :results output
  cat(varname)
  ,#+end_src

  ,#+RESULTS: anatomy
  : this is a test

  ,#+header: :var anothername=anatomy
  ,#+header: :exports results
  ,#+header: :results value
  ,#+name: second
  ,#+begin_src R
  anothername
  ,#+end_src

  ,#+RESULTS: second
  | this is a test |
  |                |
#+end_src

the block named /refid/ is not a code block, but shows how the
contents of another block (verbatim, in this case) can be used as
input to a code block.

we set /anatomy/ as the name of the first code block, using the
=#+name= line.

then, we declare /anatomy's/ source block with the =#+begin_src= line,
which has
- the language (=R=, of course)
- a header argument specifying an input variable named /varname/,
  using the value of /refid/ block
- another header argument specifying that the result of this block
  will be taken from whatever it prints on stdout

the code for /anatomy/ just consists of printing the (input) variable
/varname/ to stdout.

we continue by defining yet another source block, which we name
/second/.  it shows a different way of specifying the header
arguments, via =#+header= lines, each of which can define one or more
header arguments.  one can put some header arguments on the
=#+begin_src= line, some on one or or more =#+header= lines.

- :exports code
- :results table
- :colnames yes
- :exports none
- :tangle no
- :results none
- :var csvsedtable=csvsedtable
- :results output verbatim
- :cache

** meta : tools, etc                                                :noexport:

https://obsproject.com/wiki/OBS-Studio-Quickstart obs, on arch linux
(part of the obs-studio package).

https://github.com/ess-intro/ess-intro/issues is where most discussion
happens.

[[https://emacsconf.org/2020/talks/30/][vterm]] is pretty fast.

to get little modifier key thing:
: pip install git+https://github.com/scottkirkwood/key-mon
but, it doesn't like my control key.

to evaluate each code block in a buffer:
:from:
#+begin_example
From: "Berry, Charles" <ccberry@health.ucsd.edu>
To: Greg Minshall <minshall@umich.edu>
CC: "emacs-orgmode@gnu.org" <emacs-orgmode@gnu.org>
Subject: Re: org-in-org
Date: Tue, 23 Feb 2021 19:46:32 +0000
#+end_example
:end:
#+header: :results both
#+BEGIN_SRC emacs-lisp
(defun org-exe-org ()
  (let ((org-confirm-babel-evaluate nil))
    (org-edit-src-code)
    (org-babel-execute-buffer)
    (org-edit-src-exit)))
#+END_SRC

then, do this:
: (org-babel-map-executables nil (org-exe-org))

but, i'd rather query, e.g., =:exports= to see if it exports results.

** elisp code                                                       :noexport:
       :PROPERTIES:
       :header-args+: :tangle ./tangled/el-org.el
       :END:

*** filter
#+name: org-filter-by-results
#+begin_src elisp :results none
  (require 'ob-core)

  (defun org-filter-by-argument-value (arg values &optional locs negate)
	  "Return the subset of LOCS (default: (point)) that correspond
  to evaulatable locations in the current buffer whose
  \"info\" (org-babel-get-src-block-info) argument parameter
  contains an argument ARG with a value in VALUES."
	  (let ((pt (point))
				  (results (mapcar (lambda (l)
									   (progn
										   (goto-char l)
										   (let* ((info (org-babel-get-src-block-info))
														  (value (cdr (assoc arg (nth 2 info)))))
											   (if (or (and negate (not (member value values)))
															   (and (not negate) (member value values)))
													   l
												   nil))))
								   (if locs locs (list (point))))))
		(goto-char pt)
		(reverse (seq-filter (lambda(x) x) results))))
#+end_src

*** for each block in the (whichever) buffer

- if :eval is not (some form of) "no", offer it up for evaluation

#+name: org-walk-and-evaluate
#+BEGIN_SRC elisp :results none
  (require 'ob-core)

  (defun org-walk-and-evaluate (&optional arg values dontnegate)
      "Based on org-babel-execute-buffer, with the main difference
  that we return the locations of the blocks we evaluated.  Probably
  should just use o-b-e-b."
      (let ((result nil)
            (arg (if arg arg ':eval))
            (values (if values
                        values
                      (list "never" "never-export" "no" "no-export")))
            (negate (if dontnegate nil t)))
        (save-window-excursion
          (org-babel-map-executables nil
            (if (org-filter-by-argument-value
                 arg values nil negate)
                (progn
                  ;; fine, this is horrible.
                  (setq result (append result (list (point))))
                  ;; flat-out copied from (org-babel-execute-buffer)
                  (if (memq (org-element-type (org-element-context))
                            '(babel-call inline-babel-call))
                      (org-babel-lob-execute-maybe)
                    (org-babel-execute-src-block))
                  (point)))))
        result))
#+END_SRC

*** for each block/call point in current buffer

- if :exports "results" or "both", evaluate it

evaluate each source block/call point that :exports either "results"
or "both",

#+name: do-source-blocks
#+begin_src elisp :results none
      (defun do-source-blocks ()
          (let (results
                (pt (point)))
            (org-babel-eval-wipe-error-buffer)
            (unwind-protect
                (save-window-excursion
                  (setq results (org-walk-and-evaluate
                                 ':exports
                                 (list "results" "both")
                                 (org-get-org-blocks t)))))
              results))
#+end_src
*** for each org block in the (whichever) buffer

- if :exports "results" or "both", evaluate all blocks in the org block

#+name: org-get-org-blocks
#+begin_src elisp :results none
  (require 'ob-core)
  (require 'org-element)

  (defun org-get-org-blocks (&optional complement)
    "return the starting location of each org (language) source
  block in the current buffer; returns the complement of that set
  if COMPLEMENT is true"
    (let ((blocks nil))
      (org-babel-map-executables nil
        (let ((info (org-babel-get-src-block-info t)))
          (if (xor (equal (car info) "org") complement)
              (setq blocks (cons (point) blocks)))))
      (reverse blocks)))
#+end_src

for each org-in-org block that :exports either "results" or "both",
open up an edit buffer, and evaluate all internal code that :exports
either "results" or "both".
#+name: do-org-blocks
#+begin_src elisp :results none
	(defun do-org-blocks ()
		(let (results
					(pt (point)))
			(org-babel-eval-wipe-error-buffer)
			(unwind-protect
					(save-window-excursion
						(mapc
						 (lambda (l)
							 (goto-char l)
							 (org-babel-do-in-edit-buffer
								(let ((result (org-walk-and-evaluate)))
									(org-edit-src-save)
									(setq results (append results (list (list l result)))))))
						 (org-filter-by-argument-value
							':exports (list "results" "both") (org-get-org-blocks))))
				(goto-char pt))
			results))
#+end_src

#+name: publishing
#+begin_src elisp :results none
  (setq org-publish-project-alist
        '(("ess-org-html"
           :with-toc nil
           :base-directory "./"
           :publishing-directory "./artefacts"
           :exclude ".*"
           :include ("ess-org.org")
           :publishing-function org-html-publish-to-html)
          ("ess-org-pdf"
           :with-toc nil
           :base-directory "./"
           :publishing-directory "./artefacts"
           :exclude ".*"
           :include ("ess-org.org")
           :publishing-function org-latex-publish-to-pdf)
          ("ess-org-beamer-html"
           :with-toc nil
           :base-directory "./"
           :publishing-directory "./artefacts"
           :exclude ".*"
           :include ("ess-org-beamer.org")
           :publishing-function org-html-publish-to-html)
          ("ess-org-beamer-pdf"
           :with-toc nil
           :base-directory "./"
           :publishing-directory "./artefacts"
           :exclude ".*"
           :include ("ess-org-beamer.org")
           :publishing-function org-beamer-publish-to-pdf)
          ("ess-org" :components ("ess-org-html"
                                  "ess-org-pdf"
                                  "ess-org-beamer-html"
                                  "ess-org-beamer-pdf"))))
#+end_src

** css                                                              :noexport:

#+begin_src css :tangle ./tangled/floattoc.css
  #table-of-contents {
        position: fixed;
        right: 0;
        top: 0;
        background-color:#FFF;
        padding: 1px 1%;
        border: 1px solid rgb(201,44,44);
        z-index: 2; /**/
  }

  /* Hide the full TOC by default */
  #table-of-contents #text-table-of-contents { display: none; }

  #table-of-contents:hover #text-table-of-contents {
        display: block; /* Show it on hover */
  }
#+end_src

** testing :noexport:
            :PROPERTIES:
            :header-args:     :tanglex foobar
            :END:

#+begin_src R
23
#+end_src

*** else

#+begin_src R :tanglex hoobar
a+22
#+end_src

