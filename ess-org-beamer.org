#+title: ESS in Emacs Org Mode Buffers
#+options: toc:nil ':nil
#+subtitle: part of the ESS intro series
#+author: Greg Minshall
# the following from [C-c C-e #], then [beamer] (as suggested by below tutorial)
#+options: H:1
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: default
#+beamer_color_theme:
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header:
# then, some more settings suggested by the tutorial
#+BEAMER_FRAME_LEVEL: 2





* meta, comments                                                   :noexport:

an (older?) [[https://orgmode.org/worg/exporters/beamer/tutorial.html][tutorial]] on using beamer in org mode.  a (newer?)
tutorial, using the [[https://orgmode.org/worg/exporters/beamer/ox-beamer.html][new export engine]].

it adding beamer themes are an issue, [[https://dev.to/viglioni/installing-latex-themes-on-your-machine-emacs-org-mode-1k9e][this page]] might helps.  for
choosing themes, [[https://deic-web.uab.cat/~iblanes/beamer_gallery/][this page]] works.  i find =default= to be just fine.

* Org Mode

"If Emacs is the distribution, Org Mode is the entire desktop
environment one runs on top of it."

Emacs Org Mode is an outline-structured file format and backing
software that allows you to (among many other things)
- markup text via *asteriskizing*, =equalizing=, +plusizing+,
  /slashizing/, ~tildeizing~, _underscorizing_, etc.
- export a file, or a subtree of it, as, e.g., an .html or .pdf file
- take notes
- create agendas (items with date elements)
- organize your LIFE!
- do calculations -- good support for math, LaTeX, etc.
- table support for storing information (including support for
  formulae)

* Babel -- Org Mode support for programming

One can write source code in "source blocks".  Source blocks have the
following "attributes":

- a (optional) name
- source code (in one language per source block)
- "header arguments", parameters which define how a source block
  interacts with its environment

* "To a source block", you can

- *evaluate* it to produce results, which, in turn, may be used as input
  to another source block.  [note there are security issues here: you
  will need to customize the Emacs variable
  =org-babel-load-languages=, and you will be prompted each time
  before a code block is evaluated.]
- *export* it (either the code, its results, or both) into a .html,
  .pdf, or other format file
- *tangle* it, that is, export the source code itself into a separate
  file, that might be used as input to a compilation or some other
  packaging step, or be a stand alone script (=Rscript=, say).
- *edit* it, either in place in the Org buffer, or "stand alone" in an
  Org Source buffer, with the possibility of real-time syntax
  checking/linting, etc.

* R source blocks

In particular, one can have a source block with R code
#+begin_src org :exports code
	,#+begin_src R :results value
		"here, the last value executed is the result"
	,#+end_src
#+end_src

To evaluate an entire source block in an Org buffer, type =[C-c C-c]= or
=[C-c C-v e]=.

To edit this source block in an Org Src buffer, type =[C-c ']=.  To
close the Org Source buffer and return to the Org buffer, type
=[C-c ']= again.

* Org Src buffers for R

Again, =[C-c ']= to enter and to exit.

An Org Src buffer for R is an =ESS[R]= mode buffer.

Evaluating code is still initiated with =[C-c C-c]=, but tends to send
just the function at the current location to be evaluated (rather than
the whole Org Src buffer), and moves the cursor ("point") to the start
of the next function.

* Header arguments

- :var :: allows results of other computations in an org file to be
  used as input to this source block
- :results :: defines how results are collected after evaluation of
  the source block, and how (or whether) they are inserted into the
  org buffer
- :tangle :: name of file to which to /tangle/ the contents of this
  source block
- :session :: normally, source blocks are evaluated in a "pristine"
  environment (a new R process, say); with this option, successive
  evaluations of source blocks can occur within a single process.
- :noweb :: allows code from another place in the org file to be
  inserted at a point in the current org file when evaluating or
  exporting.

* :session for R :noexport:

Normally, successive evaluations of source blocks do not have access to
any state instantiated by previous evaluations (other than emitted
results).

However, the =:session NAME= header argument causes all evaluation of
a block to occur in a single R process (in an Emacs buffer, under
ESS).

#+begin_src org
	,#+begin_src R :session aRbitRaRyname
		a <- rnorm(1)
	,#+end_src
#+end_src

This can be convenient, as it allows you to build up, and examine, a
series of functions and variables, ease debugging, etc. [fn::In
general, depending on the language of the source block you are using,
evaluation with or without sessions may exhibit different behavior.
(I think I've noticed this with python.)]

* Other resources (I)

For Emacs: 

- SystemCrafters' [[https://www.youtube.com/c/SystemCrafters/playlists][_playlists_]] include various introductory videos.

For Org Mode:

- The Org Mode [[https://orgmode.org/][_web site_]].
- Rainer König has a [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][_series of videos_]] (now also available as a
  [[https://www.udemy.com/course/getting-yourself-organized-with-org-mode/?referralCode=D0CB0D077ED5EC0788F7][_course on Udemy_]]).
- DT ("Distro Tube"?) has yet another [[https://www.youtube.com/watch?v=Ea_-TaEGa7Y][introductory video]].
- The Org Mode community site ("worg") has a [[https://orgmode.org/worg/org-contrib/babel/][_section_]] about Babel.

For Org mode with R:

- Erik Riverson many years ago produced [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][_a tutorial_]] that, while dated
  in some places, is still very useful.
- XXX A copy of a longer exposition of this tutorial XXX

* Other resources (II)

For everything:

- the Emacs, etc., "info pages" (=[C-h i]=), which include information
  on Emacs, Org Mode, etc. (even R, depending on your installation),
  provide very detailed information.

There are various ways to connect with other Org Mode users listed
[[https://orgmode.org/community.html][here]].  Similar information for ESS is [[https://ess.r-project.org/index.php?Section=getting%20help][here]].

* Farewell

Thank you for "attending" this tutorial.  I hope it has given you a
sense of Org Mode.  This has been more of a teaser than an exhaustive
introduction, but the resources we listed above should be enough to
ease you into using R with Org Mode.
