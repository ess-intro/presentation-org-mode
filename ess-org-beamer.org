* slides for the talk

* code blocks

there are a few pieces of information org-mode needs to define a
block of code
- (optionally) a =name= for the block (to use to include the block's
  code in another block with [[file:ess-org.org::*<<noweb>> noweb][noweb]], or to use the block's results as
  input to another block with [[file:ess-org.org::*<<variables>> variables][:var]].
- the language of the code in the block
- various arguments that define how the code interacts with its
  environment
- the source code itself

there are at least two ways of encoding the needed information:

* a source block

the most "normal" way of defining source code is with a /source
block/.

#+begin_src org
  ,#+begin_src R
    "hello, world"
  ,#+end_src
#+end_src

we use this form below in discussing the structure of a code block.

* an /inline/ code block

in a second form, known as an /inline code block/, the entire block
can fit on one line (though multiple lines are possible).

#+begin_src org
  src_R{"hello, world"}
#+end_src

i don't use this form.  for this tutorial i looked at it briefly.  it
appears its semantics are different from that of source blocks.  other
than that, i will not discuss it further.

* the anatomy of a source block

#+header: :var testish=testish
#+header: :var inflateish=inflateish
#+header: :var ourish=ourish
#+header: :var npmish=npmish
#+header: :var opexpls=opexpls
#+header: :var prostates=prostates
#+name: anatomy
#+begin_src R :tangle ./here.R :shebang "#!/usr/bin/env Rscript"
#+end_src

- :exports code
- :results table
- :colnames yes
- :exports none
- :tangle no
- :results none
- :var csvsedtable=csvsedtable
- :results output verbatim
