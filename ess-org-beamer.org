* Introduction to Org Mode for ESS users :noexport:
#+title: Introduction to Org Mode for ESS users
#+subtitle: [[https://ess-intro.github.io/][_part of the ESS intro series_]]
#+author: Greg Minshall
#+options: toc:nil ':nil
#+options: H:1
# floating TOC:
#+HTML_HEAD:   <link href="./ess-org-beamer.css" rel="stylesheet"/>
# beamer bits
# the following from [C-c C-e #], then [beamer] (as suggested by below tutorial)
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: default
# color'd links https://tex.stackexchange.com/a/13424/101318
#+beamer_header: \definecolor{links}{HTML}{228B22}
#+beamer_header: \hypersetup{colorlinks,linkcolor=,urlcolor=links}

* meta, comments                                                   :noexport:

an (older?) [[https://orgmode.org/worg/exporters/beamer/tutorial.html][tutorial]] on using beamer in org mode.  a (newer?)
tutorial, using the [[https://orgmode.org/worg/exporters/beamer/ox-beamer.html][new export engine]].

it adding beamer themes are an issue, [[https://dev.to/viglioni/installing-latex-themes-on-your-machine-emacs-org-mode-1k9e][this page]] might helps.  for
choosing themes, [[https://deic-web.uab.cat/~iblanes/beamer_gallery/][this page]] works.  i find =default= to be just fine.

* Org Mode

"If Emacs is the distribution, Org Mode is the entire desktop
environment one runs on top of it."

Emacs Org Mode is an outline-structured, plain text, file format and
backing software that allows you to (among many other things)
- markup text via *asteriskizing*, =equalizing=, +plusizing+,
  /slashizing/, ~tildeizing~, _underscorizing_, etc.
- export a file, or a subtree of it, as, e.g., an .html or .pdf file
- take notes
- create agendas (items with date elements)
- organize your LIFE!
- do calculations -- good support for math, LaTeX, etc.
- table support for storing information (including support for
  formulae)

* Babel -- Org Mode support for programming

One can write source code in "source blocks".  Source blocks have the
following attributes:

- a name (optional)
- source code, one language per source block (though, if desired,
  multiple languages per file)
- "header arguments", parameters which define how a source block
  interacts with its environment

* "To a source block", you can

- *evaluate* it (=[C-c C-c]=[fn:point: with =point= in the source
  block]) to produce results, which, in turn, may be used as input to
  another source block.  *NB:* there are security issues here: you
  will need to customize the Emacs variable =org-babel-load-languages=
  , and you will be prompted each time before a code block is
  evaluated
- *export* (=[C-c C-e]=) the code, its results, or both, with
  other parts of the .org file, into a .html, .pdf, or other format
  file
- *tangle* it (=[C-c C-v t]=), that is, write the source code itself
  into a separate file, that might be used as input to a compilation
  or some other packaging step, or be a stand alone script (=Rscript=,
  say).
- *edit* it, either in place in the Org buffer, or "stand alone" in an
  /OrgSrc/ buffer (=[C-c ']=[fn:point]), with the major mode set to
  that of the language (so, for R, =ESS[R]=).


* R source blocks

In particular, one can have a source block with R code
#+begin_src org :exports code
  ,#+begin_src R :results value
      "here, the last value executed is the result"
  ,#+end_src

  ,#+begin_src R :results output
      cat("here, the output is the result\n")
  ,#+end_src
#+end_src

To evaluate a source block, type =[C-c C-c]= or =[C-c C-v e]=.

To edit this source block in an OrgSrc buffer with major mode
=ESS[R]=, type =[C-c ']=.  To close the OrgSrc buffer and return to
the Org buffer, type =[C-c ']= again.

* Header arguments

- :noweb :: allows code from another place in the org file to be
  inserted at a point in the current org file when evaluating or
  exporting.
- :var :: allows results of other computations in an org file to be
  used as input to this source block
- :results :: defines how results are collected after evaluation of
  the source block, and how (or whether) they are inserted into the
  org buffer
- :session :: outlined on next slide
- :tangle :: name of file to which to /tangle/ the contents of this
  source block

* =:session= header argument

- Normally, Org Mode evaluates a source block by forking a new R
  subprocess, passing it the code (and any variables to be used as
  input), letting the code run, capturing the results, and then
  disposing of the R subprocess.  This ensures that code runs in a
  fresh environment.

- Often, especially when doing statistical analysis, we would like to
  build up state over time, by executing various code blocks, and/or
  by poking in the environment.

- Also, we may want to debug our code in a convenient way.

The =:session= header argument causes evaluation of a source block to
take place in a long-running inferior ESS (=iESS=) process; all source
code blocks with the same =:session= name run in the same =iESS=
process.

* A style of working

In Emacs, I find that I flit between three buffers:
- the .org file
  - often doing minor in-line edits in a source block
- an OrgSrc edit buffer
  - for more major edits (and get font lock, etc.)
  - these buffers come and go, as needed
- the R =:session= buffer to
  - run code
  - examine state
  - debug as needed

* Other resources

- the official [[https://orgmode.org/quickstart.html][Quick Start]] guide, a very good introduction to Org Mode

- the [[https://orgmode.org/][Org Mode]] web page
  
- the Org Mode [[https://orgmode.org/worg/][worg]] site (you may find it useful to take a linear
  stroll through [[https://orgmode.org/worg/sitemap.html][the worg site map]])
  
- the other presentations in this [[https://ess-intro.github.io/][ESS intro series]]

- the beamer slides for this tutorial are [[https://ess-intro.github.io/presentation-org-mode/artefacts/ess-org-beamer.html][here]] ([[https://ess-intro.github.io/presentation-org-mode/artefacts/ess-org-beamer.pdf][pdf]])

- a [[https://ess-intro.github.io/presentation-org-mode/artefacts/ess-org-demo-expanded.org][.org file]] for experimenting (an HTML version [[https://ess-intro.github.io/presentation-org-mode/artefacts/ess-org-demo-results.html][here]] and a PDF
  one [[https://ess-intro.github.io/presentation-org-mode/artefacts/ess-org-demo-results.pdf][here]])

* Tutorials, Videos

There are some nice tutorials:

- a somewhat older one is from Erik Iverson, [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][org-mode-R-tutorial.org]]
- a more recent one from Vikas Rawal, [[https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org][orgpapers.org]]

And, some videos, including:

- Rainer König's [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][screencasts]] about Org Mode (also available as a
  [[https://www.udemy.com/course/getting-yourself-organized-with-org-mode/?referralCode=D0CB0D077ED5EC0788F7][course on Udemy]])
- DT ("Distro Tube"?) has yet another [[https://www.youtube.com/watch?v=Ea_-TaEGa7Y][introductory video]].

* Farewell

Thank you for "attending" this tutorial.  I hope it has given you a
sense of Org Mode.  This has been more of a teaser than an exhaustive
introduction, but the resources listed above should be enough to ease
you into using R with Org Mode.

*** Acknowledgements

Thanks to all the authors, maintainers, and cooperative users of R,
Emacs, ESS, and the like.  While I retain responsibility for errors,
for specific suggestions on this tutorial I thank C Berry and
V Arel-Bundock.
